// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import '@openzeppelin/contracts/access/Ownable.sol';
import '@openzeppelin/contracts/token/ERC721/ERC721.sol';
import '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';
import '@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol';

contract EcoAdsCollection is
	ERC721,
	ERC721Enumerable,
	ERC721URIStorage,
	Ownable
{
	enum uriIndex {
		zero,
		one,
		two,
		three,
		four
	}

	uint256 public tokenIdCounter = 0;

	constructor(
		string memory _name,
		string memory _symbol,
		string[] memory _tokensURIs,
		address _EAMAddress
	) ERC721(_name, _symbol) Ownable(_EAMAddress) {
		safeMint(_EAMAddress, tokenIdCounter, _tokensURIs[uint256(uriIndex.zero)]);
		tokenIdCounter++;

		safeMint(_EAMAddress, tokenIdCounter, _tokensURIs[uint256(uriIndex.one)]);
		tokenIdCounter++;

		safeMint(_EAMAddress, tokenIdCounter, _tokensURIs[uint256(uriIndex.two)]);
		tokenIdCounter++;

		safeMint(_EAMAddress, tokenIdCounter, _tokensURIs[uint256(uriIndex.three)]);
		tokenIdCounter++;

		safeMint(_EAMAddress, tokenIdCounter, _tokensURIs[uint256(uriIndex.four)]);
		tokenIdCounter++;
	}

	function safeMint(
		address to,
		uint256 tokenId,
		string memory uri
	) public onlyOwner {
		_safeMint(to, tokenId);
		_setTokenURI(tokenId, uri);
	}

	// The following functions are overrides required by Solidity.

	function _update(
		address to,
		uint256 tokenId,
		address auth
	) internal override(ERC721, ERC721Enumerable) returns (address) {
		return super._update(to, tokenId, auth);
	}

	function _increaseBalance(
		address account,
		uint128 value
	) internal override(ERC721, ERC721Enumerable) {
		super._increaseBalance(account, value);
	}

	function tokenURI(
		uint256 tokenId
	) public view override(ERC721, ERC721URIStorage) returns (string memory) {
		return super.tokenURI(tokenId);
	}

	function supportsInterface(
		bytes4 interfaceId
	)
		public
		view
		override(ERC721, ERC721Enumerable, ERC721URIStorage)
		returns (bool)
	{
		return super.supportsInterface(interfaceId);
	}
}
